h1. Basecamp Classic API Wrapper for php 5.3+

This is a php library to access the classic Basecamp API. Collection classes provide methods to query the api and wrap each result item in an entity object. Entity objects come with methods such as update() and delete() to persist themselfes via the api. Functionality is provided to attach and detach observers to collections and entities - this is useful for logging or to print current activity to the terminal.

h2. Supported Features

* Person: startMe(), startById(), startAllByProjectId(), startAll() etc
* Project: startById(), startAll(), copy(), replicate() etc
* Milestone: startAllByProjectId(), create(), update(), delete(), complete(), uncomplete() etc
* Todolist: startById(), startAllByProjectId(), startAllByResponsibiltyParty(), create(), update(), delete() etc
* Todoitems: startAllByTodoListId(), startById(), create(), update(), delete(), complete(), uncomplete() etc
* Comments: startAllByResourceId(), startById()
* Timetracking: startAllByProjectId(), startById()

h2. Requirements

* php 5.3+ (uses namespaces)

h2. Getting Started

Please find plenty of working examples in the __basecamp/example/basecamp__ directory. Here's the basics:

h3. First Steps

# __git clone git://github.com/sirprize/basecamp.git sirprize-basecamp__
# __cd sirprize-basecamp__
# __git submodule init__
# __git submodule update__
# create a dummy project in your basecamp account
# adjust __sirprize-basecamp/example/basecamp/_config.php__ with your own settings
# make files executable in __sirprize-basecamp/example/basecamp/(milestone|person|project|todoitem|todolist)/*__
# make writeable __sirprize-basecamp/example/_logs__
# run examples

h3. Setup

bc.. $config = array(
	'baseUri' => 'https://xxx.basecamphq.com',
	'username' => 'xxx',
	'password' => 'xxx'
);

$service = new \Sirprize\Basecamp\Service($config);

h3. Fetch all projects

bc.. $projects = $service->getProjectsInstance()->startAll();

foreach($projects as $project)
{
	print $project->getName()."\n";
}

h3. Copy a project

bc.. /*
 *
 * populate the target-project with the milestones,
 * todo-lists and todo-items from the source-project
 *
 */

$sourceProjectId = new \Sirprize\Basecamp\Id('xxx');
$targetProjectId = new \Sirprize\Basecamp\Id('yyy');

$projects = $service->getProjectsInstance();
$sourceProject = $projects->startById($sourceProjectId);
$sourceProject->copy($targetProjectId);

h3. Replicate a project (push deadlines to a new date)

bc.. /*
 *
 * populate the target-project with the milestones,
 * todo-lists and todo-items from the source-project.
 * the last milestone deadline is pushed to 2010-12-30 and
 * all other deadlines will be calculated relative to it
 *
 */

$sourceProjectId = new \Sirprize\Basecamp\Id('xxx');
$targetProjectId = new \Sirprize\Basecamp\Id('yyy');

$projects = $service->getProjectsInstance();
$sourceProject = $projects->startById($sourceProjectId);
$referenceDate = new \Sirprize\Basecamp\Date('2010-12-30');
$referenceMilestone = \Sirprize\Basecamp\Schema\Export::REFERENCE_EXTREMITY_LAST;
$sourceProject->replicate($targetProjectId, $referenceDate, $referenceMilestone);

h3. Create a new milestone

bc.. $milestones = $service->getMilestonesInstance();
$milestone = $milestones->getMilestoneInstance();
$deadline = new \Sirprize\Basecamp\Date('2010-03-01');
$projectId = new \Sirprize\Basecamp\Id('xxx');
$userId = new \Sirprize\Basecamp\Id('xxx');

$milestone
	->setProjectId($projectId)
	->setResponsiblePartyId($userId)
	->setDeadline($deadline)
	->setTitle('Milestoners Everywhere')
	->setWantsNotification(true)
	->create()
;

h2. Todo

* Account
* Companies
* Categories
* Messages
* Comments: create(), update(), delete()
* Time tracking: startAllByTodoItemId(), create(), update(), delete()

h2. Contributors
* "lacyrhoades":https://github.com/lacyrhoades
* "morrislaptop":https://github.com/morrislaptop